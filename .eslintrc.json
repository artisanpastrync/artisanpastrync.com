{
    // Specifies that this is the root configuration file and stops ESLint from looking for configurations in parent folders.
    "root": true,

    // Specifies the parser for ESLint, which allows ESLint to understand TypeScript syntax.
    "parser": "@typescript-eslint/parser",

    // A list of plugins that extend the functionality of ESLint.
    "plugins": [
        "@typescript-eslint", // Provides linting rules for TypeScript.
        "prettier", // Integrates Prettier formatting rules into ESLint.
        "react", // Provides React-specific linting rules.
        "react-hooks", // Provides rules for checking Hooks in React.
        "jsx-a11y", // Provides accessibility rules for JSX elements.
        "import" // Provides linting of ES6 import/export syntax.
    ],

    // Extends a set of predefined configurations.
    "extends": [
        "eslint:recommended", // Uses recommended rules from ESLint.
        "plugin:@typescript-eslint/recommended", // Uses recommended rules from the @typescript-eslint plugin.
        "plugin:react/recommended", // Uses recommended rules from the React plugin.
        "plugin:react-hooks/recommended", // Uses recommended rules for React Hooks.
        "plugin:jsx-a11y/recommended", // Uses recommended rules for accessibility.
        "plugin:import/errors", // Uses rules for import errors.
        "plugin:import/warnings", // Uses rules for import warnings.
        "plugin:import/typescript", // Uses TypeScript-specific rules for import/export syntax.
        "prettier", // Disables ESLint rules that conflict with Prettier.
        "plugin:prettier/recommended", // Enables Prettier plugin and displays Prettier errors as ESLint errors. Make sure this is always the last configuration in the extends array.
        "next", // Uses the Next.js ESLint configuration.
        "next/core-web-vitals" // Uses the Next.js Core Web Vitals ESLint configuration.
    ],

    // Specifies custom rules and overrides default rules.
    "rules": {
        // Integrates Prettier formatting as ESLint rules and sets it to show warnings.
        "prettier/prettier": ["warn", {}, { "usePrettierrc": true }],

        // Disallows unused variables and sets it to show warnings instead of errors.
        "@typescript-eslint/no-unused-vars": [
            "warn",
            {
                "args": "all",
                "argsIgnorePattern": "^_",
                "caughtErrors": "all",
                "caughtErrorsIgnorePattern": "^_",
                "destructuredArrayIgnorePattern": "^_",
                "varsIgnorePattern": "^_",
                "ignoreRestSiblings": true
            }
        ],

        // Customizes React rules.
        "react/react-in-jsx-scope": "off", // Turns off the rule that checks for React in scope, since Next.js does this automatically.
        "react/prop-types": "off", // Turns off prop-types checking, as TypeScript is used for type checking.

        // Customizes import/order rules for import statements.
        "import/order": [
            "warn", // Treats import order issues as errors.
            {
                "groups": ["builtin", "external", "internal"], // Orders imports into groups.
                "newlines-between": "always", // Enforces a newline between import groups.
                "alphabetize": {
                    "order": "asc", // Alphabetizes imports in ascending order.
                    "caseInsensitive": true // Ignores case when alphabetizing.
                }
            }
        ],

        // Enforces Unix-style line endings.
        "linebreak-style": ["error", "unix"],

        // Enforces the use of single quotes for strings.
        "quotes": ["error", "single"],

        // Enforces the use of semicolons.
        "semi": ["error", "always"],

        // Customize accessibility (a11y) rules to be warnings instead of errors.
        "jsx-a11y/accessible-emoji": "warn",
        "jsx-a11y/alt-text": "warn",
        "jsx-a11y/anchor-has-content": "warn",
        "jsx-a11y/anchor-is-valid": "warn",
        "jsx-a11y/aria-activedescendant-has-tabindex": "warn",
        "jsx-a11y/aria-props": "warn",
        "jsx-a11y/aria-proptypes": "warn",
        "jsx-a11y/aria-role": "warn",
        "jsx-a11y/aria-unsupported-elements": "warn",
        "jsx-a11y/autocomplete-valid": "warn",
        "jsx-a11y/click-events-have-key-events": "warn",
        "jsx-a11y/control-has-associated-label": "warn",
        "jsx-a11y/heading-has-content": "warn",
        "jsx-a11y/html-has-lang": "warn",
        "jsx-a11y/iframe-has-title": "warn",
        "jsx-a11y/img-redundant-alt": "warn",
        "jsx-a11y/interactive-supports-focus": "warn",
        "jsx-a11y/label-has-associated-control": "warn",
        "jsx-a11y/lang": "warn",
        "jsx-a11y/media-has-caption": "warn",
        "jsx-a11y/mouse-events-have-key-events": "warn",
        "jsx-a11y/no-access-key": "warn",
        "jsx-a11y/no-autofocus": "warn",
        "jsx-a11y/no-distracting-elements": "warn",
        "jsx-a11y/no-interactive-element-to-noninteractive-role": "warn",
        "jsx-a11y/no-noninteractive-element-interactions": "warn",
        "jsx-a11y/no-noninteractive-element-to-interactive-role": "warn",
        "jsx-a11y/no-noninteractive-tabindex": "warn",
        "jsx-a11y/no-redundant-roles": "warn",
        "jsx-a11y/no-static-element-interactions": "warn",
        "jsx-a11y/role-has-required-aria-props": "warn",
        "jsx-a11y/role-supports-aria-props": "warn",
        "jsx-a11y/scope": "warn",
        "jsx-a11y/tabindex-no-positive": "warn"
    },

    // Specifies global settings for the React plugin.
    "settings": {
        "react": {
            "version": "detect" // Automatically detects the version of React to use.
        }
    }
}
